/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/mustache/mustache.js":
/*!*******************************************!*\
  !*** ./node_modules/mustache/mustache.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// This file has been generated from mustache.mjs\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var tokens = cache[cacheKey];\n\n    if (tokens == null)\n      tokens = cache[cacheKey] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `tags` argument is given here it must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  Writer.prototype.render = function render (template, view, partials, tags) {\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, tags);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, tags) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, tags);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, tags) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      return this.renderTokens(this.parse(indentedValue, tags), context, partials, indentedValue);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '3.2.1',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    to_html: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer. If the optional `tags` argument is given here it must be an\n   * array with two string values: the opening and closing tags used in the\n   * template (e.g. [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  mustache.render = function render (template, view, partials, tags) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, tags);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n\n\n//# sourceURL=webpack:///./node_modules/mustache/mustache.js?");

/***/ }),

/***/ "./src/eventPubSub.js":
/*!****************************!*\
  !*** ./src/eventPubSub.js ***!
  \****************************/
/*! exports provided: Events */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Events\", function() { return Events; });\n// PubSub Mediator Object\n\nconst Events = (function() {\n  let _events = {};\n\n  function on(eventName, fn) {\n    _events[eventName] = _events[eventName] || [];\n    _events[eventName].push(fn);\n    console.log(_events);\n  }\n\n  function off(eventName, fn) {\n    if (_events[eventName]) {\n      for (let i = 0; i < _events[eventName].length; i++) {\n        if (_events[eventName][i] === fn) {\n          _events[eventName].splice(i, 1);\n          console.log(_events);\n          break;\n        }\n      }\n    }\n  }\n\n  function emit(eventName, data) {\n    if (_events[eventName]) {\n      _events[eventName].forEach(function(fn) {\n        fn(data);\n      });\n    }\n  }\n\n\n  return { on, off, emit };\n})();\n\n\n\n//# sourceURL=webpack:///./src/eventPubSub.js?");

/***/ }),

/***/ "./src/factories/factoryFunctions.js":
/*!*******************************************!*\
  !*** ./src/factories/factoryFunctions.js ***!
  \*******************************************/
/*! exports provided: ToDoItem, Projects, Project */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _toDoItem_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDoItem.js */ \"./src/factories/toDoItem.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ToDoItem\", function() { return _toDoItem_js__WEBPACK_IMPORTED_MODULE_0__[\"ToDoItem\"]; });\n\n/* harmony import */ var _projects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./projects.js */ \"./src/factories/projects.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Projects\", function() { return _projects_js__WEBPACK_IMPORTED_MODULE_1__[\"Projects\"]; });\n\n/* harmony import */ var _project_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./project.js */ \"./src/factories/project.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Project\", function() { return _project_js__WEBPACK_IMPORTED_MODULE_2__[\"Project\"]; });\n\n\n\n\n\n//# sourceURL=webpack:///./src/factories/factoryFunctions.js?");

/***/ }),

/***/ "./src/factories/project.js":
/*!**********************************!*\
  !*** ./src/factories/project.js ***!
  \**********************************/
/*! exports provided: Project */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Project\", function() { return Project; });\n// Add and Delete ToDoItems to a Project\nconst Project = (name) => {\n  let _name = name;\n  let _toDoList = [];\n\n  const addToDoItem = (item) => {\n    _toDoList.push(item);\n    // Event Listener here to update ToDoList Display\n  }\n  \n  const removeToDoItem = (item) => {\n    _toDoList.find(function(ToDoItem, index) {\n      if (item === ToDoItem) {\n        // Event Listener here to update ToDoList Display\n        return _toDoList.splice(index, 1);\n      };\n    });\n  }\n\n  return {\n    get name() {\n      return _name;\n    },\n\n    set name(name) {\n      _name = name;\n    },\n\n    get toDoList() {\n      return _toDoList;\n    },\n\n    addToDoItem,\n    removeToDoItem\n  };\n}\n\n\n\n//# sourceURL=webpack:///./src/factories/project.js?");

/***/ }),

/***/ "./src/factories/projects.js":
/*!***********************************!*\
  !*** ./src/factories/projects.js ***!
  \***********************************/
/*! exports provided: Projects */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Projects\", function() { return Projects; });\n// Module containing list of all projects\nconst Projects = (function() {\n  let _list = [];\n  // let projectTemplate = document.getElementById(\"projects-template\").innerHTML;\n  // console.log(projectTemplate);\n\n  const addProject = (project) => {\n    _list.push(project);\n    // Event listener to update Project list\n  }\n\n  const removeProject = (targetProject) => {\n    _list.find(function(project, index) {\n      if (project === targetProject) {\n        return _list.splice(index, 1);\n        // Event listener to update Project list\n      }\n    });\n  }\n\n  const findProject = (projectName) => {\n    let projectToReturn;\n\n    for (let project of _list) {\n      if (project.name === projectName) {\n        return project;\n      }\n      \n    }\n\n    // _list.forEach(function(project, idx) {\n    //   if (project.name === projectName) {\n    //     console.log(project);\n    //     projectToReturn = project;\n    //   }\n    //   break;\n    // });\n\n    // return projectToReturn;\n  }\n\n  return {\n    get list() {\n      return _list;\n    },\n\n    addProject,\n    removeProject,\n    findProject\n  };\n})();\n\n\n\n//# sourceURL=webpack:///./src/factories/projects.js?");

/***/ }),

/***/ "./src/factories/toDoItem.js":
/*!***********************************!*\
  !*** ./src/factories/toDoItem.js ***!
  \***********************************/
/*! exports provided: ToDoItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ToDoItem\", function() { return ToDoItem; });\n// An information holder containing getter and setter methods\nconst ToDoItem = (title, description, dueDate, priority) => {\n  let _title = title;\n  let _description = description;\n  let _dueDate = dueDate;\n  let _priority = priority;\n\n  return { \n    get title() {\n      return _title;\n    },\n\n    set title(title) {\n      _title = title;\n    },\n\n    get description() {\n      return _description;\n    },\n\n    set description(description) {\n      _description = description;\n    },\n\n    get dueDate() {\n      return _dueDate;\n    },\n\n    set dueDate(dueDate) {\n      _dueDate = dueDate;\n    },\n\n    get priority() {\n      return _priority;\n    },\n\n    set priority(priority) {\n      _priority = priority;\n    }\n  };\n}\n\n\n\n//# sourceURL=webpack:///./src/factories/toDoItem.js?");

/***/ }),

/***/ "./src/formGenerator.js":
/*!******************************!*\
  !*** ./src/formGenerator.js ***!
  \******************************/
/*! exports provided: FormGenerator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FormGenerator\", function() { return FormGenerator; });\n/* harmony import */ var _eventPubSub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eventPubSub */ \"./src/eventPubSub.js\");\n\n\nconst FormGenerator = (function() {\n  // cache DOM\n  let body = document.querySelector(\"body\");\n  let createNewProjectButton = document.querySelector(\".create-new-project-btn\");\n  createNewProjectButton.addEventListener(\"click\", createNewProject);\n  console.log(this);\n\n  function createNewProject() {\n    createModalForm();\n    console.log(\"Create New Project\");\n  }\n  \n  function createModalForm() {\n    // Create background\n    let background = document.createElement(\"div\");\n    background.classList.add(\"modalFormBackground\");\n    body.style.overflow = \"hidden\";\n    body.appendChild(background);\n  \n    // Create form\n    let form = document.createElement(\"form\");\n    createInput(\"text\", \"project-name\", \"project-name\", \"Project Name\");\n  \n    let btnContainer = document.createElement(\"div\");\n    btnContainer.classList.add(\"btnContainer\");\n  \n    // Create button\n    let addProjectBtn = document.createElement(\"button\");\n    addProjectBtn.textContent = \"Create\";\n    addProjectBtn.type =\"submit\";\n    addProjectBtn.style.marginRight = \"5px\";\n    btnContainer.appendChild(addProjectBtn);\n  \n    // Cancel button\n    let cancelBtn = document.createElement(\"button\");\n    cancelBtn.textContent = \"Cancel\";\n    cancelBtn.type = \"button\";\n    cancelBtn.style.marginLeft = \"5px\";\n    btnContainer.appendChild(cancelBtn);\n    btnContainer.style.textAlign = \"right\";\n  \n    form.appendChild(btnContainer);\n    \n    background.appendChild(form);\n  \n    // Event Listener to create Project\n    addProjectBtn.addEventListener(\"click\", createProject);\n\n    // Cancel out of form\n    cancelBtn.addEventListener(\"click\", removeModalForm);\n  \n    function createProject(e) {\n      e.preventDefault();\n      let projectName = document.querySelector(\"#project-name\").value;\n\n      // check valid input data\n      if (projectName === \"\" || projectName.search(/^\\s*$/) === 0) {\n        console.log(false);\n      } else {\n        // create a new Project\n        _eventPubSub__WEBPACK_IMPORTED_MODULE_0__[\"Events\"].emit(\"projectCreated\", projectName);\n        removeModalForm();\n        addProjectBtn.removeEventListener(\"click\", createProject);\n      }\n    }\n\n    function removeModalForm() {\n      body.removeChild(background);\n      body.style.overflow = \"visible\";\n      cancelBtn.removeEventListener(\"click\", removeModalForm);\n    }\n  \n    function createInput(inputType, inputId, inputName, inputPlaceholder) {\n      let title_input = document.createElement(\"input\");\n      title_input.setAttribute(\"type\", inputType);\n      title_input.setAttribute(\"id\", inputId);\n      title_input.setAttribute(\"name\", inputName);\n      title_input.setAttribute(\"placeholder\", inputPlaceholder);\n      \n      form.appendChild(title_input);\n    }\n  \n  }\n\n  return {\n    createNewProject\n  }\n})();\n\n\n\n//# sourceURL=webpack:///./src/formGenerator.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./factories/factoryFunctions */ \"./src/factories/factoryFunctions.js\");\n/* harmony import */ var _formGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formGenerator */ \"./src/formGenerator.js\");\n/* harmony import */ var _eventPubSub__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./eventPubSub */ \"./src/eventPubSub.js\");\n/* harmony import */ var _projectController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./projectController */ \"./src/projectController.js\");\n/* harmony import */ var _projectView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./projectView */ \"./src/projectView.js\");\n/* harmony import */ var _toDoListView__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./toDoListView */ \"./src/toDoListView.js\");\nlet Mustache = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.js\");\n//let projectTemplate = document.getElementById(\"projects-template\");\n//console.log(projectTemplate);\n\n\n\n\n\n\n\n\nlet test = Object(_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"ToDoItem\"])(\"Test Title\", \"Test Description\", \"Test Due Date\", \"Test Priority\");\nlet test2 = Object(_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"ToDoItem\"])(\"Test Title 2\", \"Test Description 2\", \"Test Due Date 2\", \"Test Priority 2\");\nlet test3 = Object(_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"ToDoItem\"])(\"Test Title 3\", \"Test Description 3\", \"Test Due Date 3\", \"Test Priority 3\");\n\n\nlet AllToDoItems = Object(_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"Project\"])(\"All To-Do Items 2\");\nlet Project1 = Object(_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"Project\"])(\"Project 1\");\n\n_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"Projects\"].addProject(AllToDoItems);\n_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"Projects\"].addProject(Project1);\n\n\nAllToDoItems.addToDoItem(test);\nAllToDoItems.addToDoItem(test2);\nAllToDoItems.addToDoItem(test3);\nAllToDoItems.removeToDoItem(test2);\n\nProject1.addToDoItem(test);\nProject1.addToDoItem(test2);\nProject1.addToDoItem(test3);\nProject1.removeToDoItem(test2);\n\nconsole.log(\"-----All To Do Items-----\");\nconsole.log(AllToDoItems);\n\nconsole.log(\"-----Projects-----\");\nconsole.log(_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"Projects\"]);\n\n// let projectView = (ProjectView(Projects.list));\n_projectView__WEBPACK_IMPORTED_MODULE_4__[\"ProjectView\"].render();\n// ProjectView.extractProjectName();\n\nconsole.log(_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"Projects\"].list);\n\nconsole.log(\"After:\");\nconsole.log(_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"Projects\"].findProject(\"Project 1\"));\n\n\n\n\n// Way to add TO DO items to Project\n\n// ProjectController {\n  /* \n    If I have a projectController module, which takes a \"TO-DO Item\" and Project as an argument, then\n    I can add a to-do item to the project, and it essentially becomes like a reusable module for any project\n  */\n// }\n\n// Way to add Project to ProjectList\n\n// ProjectsController {\n  /* \n    If I have a projectsController module, which takes a \"Project\" as an argument, then\n    I can add a project to the projectsList, since their is only 1 project list\n  */\n// }\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/projectController.js":
/*!**********************************!*\
  !*** ./src/projectController.js ***!
  \**********************************/
/*! exports provided: ProjectController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ProjectController\", function() { return ProjectController; });\n/* harmony import */ var _factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./factories/factoryFunctions */ \"./src/factories/factoryFunctions.js\");\n/* harmony import */ var _eventPubSub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eventPubSub */ \"./src/eventPubSub.js\");\n\n\n\nconst ProjectController = (function(projects, projectClass) {\n  _eventPubSub__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].on(\"projectCreated\", add);\n  _eventPubSub__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].on(\"projectDeleted\", remove);\n\n  function add(project) {\n    projects.addProject(projectClass(project));\n    console.log(projects);\n  }\n\n  function remove(targetProject) {\n    console.log(\"Does this even work?\");\n    let projectToDelete = projects.findProject(targetProject);\n\n    projects.removeProject(projectToDelete);\n    console.log(projects);\n\n    // projects.list.find(function(project, index) {\n    //   if (project === projectToDelete) {\n    //     projects.splice(index, 1);\n    //     console.log(projects);\n    //     return;\n    //     // Event listener to update Project list\n    //   }\n    // });\n  }\n})(_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"Projects\"], _factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"Project\"]);\n\n\n\n//# sourceURL=webpack:///./src/projectController.js?");

/***/ }),

/***/ "./src/projectView.js":
/*!****************************!*\
  !*** ./src/projectView.js ***!
  \****************************/
/*! exports provided: ProjectView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ProjectView\", function() { return ProjectView; });\n/* harmony import */ var _factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./factories/factoryFunctions */ \"./src/factories/factoryFunctions.js\");\n/* harmony import */ var _eventPubSub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eventPubSub */ \"./src/eventPubSub.js\");\n\n\n\nlet Mustache = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.js\");\n\n// Display all projects in the DOM\nlet ProjectView = (function(projects) {\n  let projectNames = [];\n  let allTasksName = [];\n  let allTasksTemplate = document.getElementById(\"all-tasks-template\").innerHTML;\n  let projectTemplate = document.getElementById(\"projects-template\").innerHTML;\n  let projectList = document.getElementById(\"projects\");\n\n  console.log(projectList.children);\n\n  document.addEventListener(\"click\", deleteProject);\n\n  _eventPubSub__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].on(\"projectCreated\", render);\n\n  function deleteProject(e) {\n    if (e.target.className === \"del\") {\n      // console.log(e.target.previousElementSibling.textContent);\n      projectList.removeChild(e.target.parentNode);\n      _eventPubSub__WEBPACK_IMPORTED_MODULE_1__[\"Events\"].emit(\"projectDeleted\", e.target.previousElementSibling.textContent);\n\n      // console.log(projects);\n    }\n  }\n\n  function extractProjectName(projects, namesArray) {\n    namesArray.length = 0;\n    projects.forEach(function(item) {\n      namesArray.push(item.name);\n    });\n  }\n\n  function render() {\n    extractProjectName(projects.slice(1), projectNames);\n    extractProjectName(projects.slice(0, 1), allTasksName);\n\n    let allTasks = { allTasksName };\n    let data = { projectNames };\n\n    let allTasksItem = Mustache.render(allTasksTemplate, allTasks);\n    let listOfProjects = Mustache.render(projectTemplate, data);\n\n    projectList.innerHTML = allTasksItem;\n    projectList.innerHTML += listOfProjects; \n  } \n\n  return { render };\n})(_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"Projects\"].list);\n\n\n\n//# sourceURL=webpack:///./src/projectView.js?");

/***/ }),

/***/ "./src/toDoListView.js":
/*!*****************************!*\
  !*** ./src/toDoListView.js ***!
  \*****************************/
/*! exports provided: ToDoListView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ToDoListView\", function() { return ToDoListView; });\n/* harmony import */ var _factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./factories/factoryFunctions */ \"./src/factories/factoryFunctions.js\");\n/* harmony import */ var _eventPubSub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./eventPubSub */ \"./src/eventPubSub.js\");\n\n\n\nlet Mustache = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.js\");\n\nconst ToDoListView = (function(projects, projectClass) {\n  let toDoItemsSection = document.querySelector(\".list-of-todo-items\");\n  let projectHeading = document.querySelector(\".project-heading\");\n  let projectList = document.getElementById(\"projects\");\n  let toDoListDiv = document.getElementById(\"todo-list\");\n  let toDoListTemplate = document.getElementById(\"todo-list-template\").innerHTML;\n  console.log(toDoListTemplate);\n\n  projectList.addEventListener(\"click\", function(e) {\n    if (e.target.tagName == \"SPAN\") {\n      if (e.target.innerText === \"All To-Do Items 2\") {\n        removeCreateToDoItemBtn();\n      } else {\n        addCreateToDoItemBtn();\n      }\n      displaySelectedProject(e.target.innerText);\n      render(e.target.innerText);\n    }\n  });\n\n  function removeCreateToDoItemBtn() {\n    let createToDoItemBtn = document.querySelector(\".create-new-todo-item-btn\");\n    if (!(createToDoItemBtn === null)) {\n      toDoItemsSection.removeChild(createToDoItemBtn);\n    }\n  }\n\n  function addCreateToDoItemBtn() {\n    let createToDoItemBtn = document.querySelector(\".create-new-todo-item-btn\");\n    if (createToDoItemBtn === null) {\n      createToDoItemBtn = document.createElement(\"button\");\n      createToDoItemBtn.classList.add(\"create-new-todo-item-btn\");\n\n      let plusIcon = document.createElement(\"i\");\n      plusIcon.classList.add(\"fas\", \"fa-plus-circle\");\n\n      createToDoItemBtn.appendChild(plusIcon);\n      createToDoItemBtn.textContent = \"Create New ToDo Item\";\n      // console.log(createToDoItemBtn);\n      toDoItemsSection.appendChild(createToDoItemBtn);\n\n    }\n  }\n\n  function displaySelectedProject(projectName) {\n    let testProject = projects.findProject(projectName);\n    projectHeading.textContent = testProject.name;\n  }\n\n  function extractData(projectName) {\n    let objectData = [];\n    let targetProject = projects.findProject(projectName);\n    targetProject.toDoList.forEach(function(toDoItem, idx) {\n      objectData.push({\n        title: toDoItem.title,\n        description: toDoItem.description,\n        dueDate: toDoItem.dueDate,\n        priority: toDoItem.priority\n      });\n    });\n\n    return objectData;\n  }\n\n  function render(projectName) {\n    let data = { toDoList: extractData(projectName) };\n    toDoListDiv.innerHTML = Mustache.render(toDoListTemplate, data);\n  }\n\n  return { displaySelectedProject };\n})(_factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"Projects\"], _factories_factoryFunctions__WEBPACK_IMPORTED_MODULE_0__[\"Project\"]);\n\n\n\n\n// <button class=\"create-new-todo-item-btn\">\n//  <i class=\"fas fa-plus-circle create-new-project-btn\"></i> Create New ToDo Item\n// </button>\n\n//# sourceURL=webpack:///./src/toDoListView.js?");

/***/ })

/******/ });